#!/bin/bash




##these are set from the command line for now they are set to NOTSET

subset="NOTSET"						#subset you are activating
datacenter="NOTSET"					#datacenter we are working in set to AST or ALN
zipfilename="NOTSET"					#dlci zip file name
vmartzone="NOTSET"					#vista mart zone name
vdisclogin="NOTSET"					#vista discovery login
vdiscpasswd="NOTSET"					#vista discovery password
vdischostname="NOTSET"					#vista discovery hostname supplied to the VistaDiscovery 
customer="NOTSET"					##set this to customer  
externalintf="eth1"  					#external interface name
portnum="11080"						#visa discovery port number


perl_scripts="$HOME/perl"				#perl script dir
alnbuilddir="/opt/home/infovista/build"			#set this to the build dir, on ast /home/infovista/build
astbuilddir="/home/infovista/build"			#on aln /opt/home/infovista/build
vistadiscdir="/opt/InfoVista/VistaDiscovery/bin/" 	#infovista directory
ciscodiscdir="NOTSET"					##to set the CiscoDiscovery path
mydate=$(date +%Y%m%d) 					##sets to date.
unzipfromdir="NOTSET"					##the directory to unzip the file from
autodiscofile="NOTSET"					## variable used to store the autodisco result file
topologyoutfile="Topology_intf_out.xml" ##preset output file. could be Topology_out.xml
pcfsmount="/pcfs/activations/archives"







do_getopts () {
	
if [[ $# -ge 1 ]] ; then

    while getopts ":s:d:f:z:u:p:n:c:e:t:" opt; do
      case $opt in

	s ) subset="$OPTARG";  ;;
	d ) datacenter="$OPTARG";  ;; 
	f ) zipfilename="$OPTARG";  ;; 
	z ) vmartzone="$OPTARG";  ;; 
	u ) vdisclogin="$OPTARG";  ;; 
	p ) vdiscpasswd="$OPTARG";  ;; 
	n ) vdischostname="$OPTARG"; ;;
	c ) customer="$OPTARG";  ;;
	e ) externalintf="$OPTARG";  ;;
	t ) portnum="$OPTARG";  ;;
	h ) usage ;;
      esac
    done
  else 
    usage
  fi ;
   
  
}






usage () {
  echo
  echo "This command takes in a list of commandline arguements and executes all the commands to do an activation. The command line functions are as follows:"

  echo "-s This sets the subset. Use dlci activation set name ie NEW_SET_7.1"
  echo "-d This sets the datacenter. us austin, allen(no pcfs mount)  or pcfs"
  echo "-f This sets the zip file name to extract. use the name that is in dlci."
  echo "-z This sets the vistamart zone."
  echo "-u This sets the vista discovery login. This is used in vistadiscovery ex: pnoc_operator"
  echo "-p This sets the vista discovery password. This is used in vistadiscovery "
  echo "-n This sets the hostname that is used in vista discovery. Use the ip, or server dns name."
  echo "-c This sets the customer. ec: Cbeyond. if your customer has a space in it, put it in " ""
  echo "-e This sets the external interface. by default is eth1. (OPTIONAL)"
  echo "-t This sets the port number for vista discovery default is 11080 (OPTIONAL)"
  echo
  exit 0
}






## set the date variable.
do_setdatevar () {
echo "Setting the date variable used for setting the subset folder name."
  date="$mydate"
}






do_getexternalip () {

echo "getting the external ip address used in the connect_qos test, and CiscoDiscovery"

externalip="$(/sbin/ifconfig "$externalintf" |grep inet | grep -v inet6 | cut -d ':' -f2 |awk '{print $1}')"

## this bottom line is for testing on my slackware system that has wierd ifconfig output.
##externalip=$(/sbin/ifconfig  $externalintf | grep inet | grep -v inet6 | awk '{print $2}')


if [[ $? == 0 ]] ; then

  echo "success getting external ip address"
  else
  echo " failure getting external ip address"
  
fi ;

}





do_unzip () {
#unzip the zip file


  unzip "$unzipfromdir"/"$zipfilename" -d "$unzipfromdir"/"$date"_"$subset"

  if [[ $? == 0 ]] ; then
    echo "unzipping customer dlci zipfile succeded"
  else
    echo "unzipping customer dlci zipfile failed"
    exit 1
  fi ;

}

do_movezipfileforarchiving () {
#archive zipfile
  mv "$unzipfromdir"/"$zipfilename" "$builddir"
  if [[ $? == 0 ]] ; then 
    echo "move of customer dlci subset zipfile to activationLogs completed successfully"
  else
    echo "move of customer dlci subset zipfile failed"
    exit 1
  fi ;
}

do_makeactivationLogs () {
##makes the activation directories activationLogs
  mkdir "$builddir"/activationLogs

  if [[ $? == 0 ]] ; then
    echo "make directory activationLogs used for storing logs successful"
  else
    echo "make directory activationLogs used for storing activation logs failed!"
    exit 1
  fi ;

}
  
do_makeactivationFiles () {
# makes the activation directory activationFiles

  mkdir "$builddir"/activationFiles
  
  if [[ $? == 0 ]] ; then
    echo "make directory activationFiles used for storing activation files successful"
  else
    echo "make directory activationFiles used for storing activation files failed!"
    exit 1
  fi ;
   
}







do_setbuilddir () {
#sets the builddir variables

  if [[ "$datacenter" == "allen" || "$datacenter" == "ALLEN" ]] ; then 
    builddir="$alnbuilddir"/"$customer"/activationZip/"$date"_"$subset"
    ciscodiscdir="$alnbuilddir"/"$customer"/DiscoveryScript
    unzipfromdir="$alnbuilddir"/"$customer"/activationZip

  elif [[ "$datacenter" == "austin" || "$datacenter" == "AUSTIN" ]] ; then
    builddir="$astbuilddir"/"$customer"/activationZip/"$date"_"$subset"
    ciscodiscdir="$astbuilddir"/"$customer"/DiscoveryScript
    unzipfromdir="$astbuilddir"/"$customer"/activationZip
  elif [[ "$datacenter" == "pcfs" || "$datacenter" == "PCFS" ]] ; then
    builddir="$pcfsmount"/"$customer"/"$date"_"$subset"
    ciscodiscdir="$alnbuilddir"/"$customer"/DiscoveryScript
    unzipfromdir="$pcfsmount"/"$customer"/
  else
    echo "error invalid arguement"
    usage
    exit 1
  fi;
}






do_cdperlscripts () {
#change to the perl scripts folder. needed to properly run connect_qos.pl
  cd $perl_scripts

  if [[ $? == 0 ]] ; then
    echo "success changing directory to perl to run connect_qos test"
  else
    echo "failure changing directory to perl to run connect_qos test failed"
    exit 1
  fi ;
}






do_connectqostest () {
  ## do connect_qos.pl

  echo "executing connect test"
  
  perl connect_report_v1_2.pl  "$builddir"/DiscoveryInfo_"$customer".csv -D "$externalip" 2>&1 | tee "$builddir"/activationLogs/connect_test-out;  

  if [[ $? == 0 ]] ; then 
    echo "connect_qos connectivity test passed"
  else
    echo "connect_qos connectivity test failed!"
    exit 1
  fi ; 

}






do_vistadiscovery () {
  ##do vista discovery

  echo " ( time "$vistadiscdir"launchserver.sh -vmVersion 42000 -vmBase http://"$vdischostname":"$portnum"/ -vmUser "$vdisclogin" -vmPassword "$vdiscpasswd" -zone "$vmartzone" -ipListFile "$builddir"/DiscoveryInfo_"$customer".csv  -noVMProvisioning ) 2>&1 | tee "$builddir"/activationLogs/vista_discovery-out;"
  
  ( time "$vistadiscdir"launchserver.sh -vmVersion 42000 -vmBase http://"$vdischostname":"$portnum"/ -vmUser "$vdisclogin" -vmPassword "$vdiscpasswd" -zone "$vmartzone" -ipListFile "$builddir"/DiscoveryInfo_"$customer".csv  -noVMProvisioning ) 2>&1 | tee "$builddir"/activationLogs/vista_discovery-out;  

  if [[ $? == 0 ]] ; then
    echo "VistaDiscovery exited successfully"
  else
    echo "VistaDiscovery exited with an error code..."
    exit 1
  fi ;
  
}

do_getautodiscofile () {
#gets the autodiscovery file from the vist_discovery log.

  autodiscofile="$( grep autodisco_result "$builddir"/activationLogs/vista_discovery-out | awk {'print $10'} )"

}


do_moveautodisco () {
  ##copy the autodisco_result file to activationfiles directory
  cp  "$autodiscofile" "$builddir"/activationFiles/

  if [[ $? == 0 ]] ; then 
    echo "success moving autodisco_result file to activationFiles directory for backup"
  else
    echo "failure moving autodisco_result file to activationFiles directory"
    exit 1
  fi ;
    ## copy the autodisco_result to the cisco discovery dir
  cp "$autodiscofile" "$ciscodiscdir"/xml/Topology.xml

  if [[ $? == 0 ]] ; then 
    echo "success moving autodisco_result file for CiscoDiscovery"
  else
    echo "failure moving autodisco_result file for CiscoDiscovery"
    exit 1
  fi ;
}  




do_copydiscoveryinfo () {  


  
  ##copy Discoveryinfo file to ciscodiscovery dir
  cp "$builddir"/DiscoveryInfo_"$customer".csv "$ciscodiscdir"/DiscoveryInfo_"$customer".csv 
  
  if [[ $? == 0 ]] ; then 
    echo "moving DiscoveryInfo file CiscoDiscovery folder, for CiscoDiscovery successful"
  else
    echo "moving DiscoveryInfo file to CiscoDiscovery, for CiscoDiscovery failed"
    exit 1
  fi ;
}




do_copycustomerfile () {  
  ## copy the customer.csv file to the ciscodiscovery dir
  cp "$builddir"/customer.csv "$ciscodiscdir"/customer.csv
  
   if [[ $? == 0 ]] ; then 
    echo "moving customer.csv file to CiscoDiscovery, for CiscoDiscovery successful"
  else
    echo "moving customer.csv file to CiscoDiscovery, for CiscoDiscovery failed"
    exit 1
  fi ;
}







do_grepinterfaces () {  
  ## grep out the interfaces into cisco discovery/ interface.csv
  grep -h INTERFACE "$builddir"/ce_*.csv > "$builddir"/activationFiles/interface.csv

  if [[ $? == 0 ]] ; then 
    echo "moving interface.csv file to CiscoDiscovery, for CiscoDiscovery successful"
  elif [[ $? == 1 ]] ; then
	echo "no interfaces found. output file will be Topology_out.xml"
	$topologyoutfile="Topology_out.xml"
  else
    echo "moving interface.csv file to CiscoDiscovery, for CiscoDiscovery failed"
    exit 1
  fi ;  
}




do_movefilesforcdisc () {
## move files into cisco discovery folder for ciscodiscovery



   do_moveautodisco;
#   do_copydiscoveryinfo;
#   do_copycustomerfile;
   do_grepinterfaces;
}
  

do_checkintegretyofmoveforcdisc () {

  ## compare autodisco file and make sure they are identical
  cmp -s "$autodiscofile" "$ciscodiscdir"/xml/Topology.xml
  if [[ $? == 0 ]] ; then
    echo "Check of Topology file integrity passed. files are identical."
  else
    echo "Check of Topology file failed. Files are not identical."
  fi ;
      
#  ## check and make sure discoveryinfo file is identical.
#  cmp -s "$builddir"/DiscoveryInfo_"$customer".csv "$ciscodiscdir"/DiscoveryInfo_"$customer".csv
#  if [[ $? == 0 ]] ; then
#    echo "Check of DiscoveryInfo file integrity passed. files are identical."
#  else
#    echo "Check of DiscoveryInfo file integrity failed. Files are not identical."
#  fi ;      

#  ## check and make sure customer.csv files are identical.
#  cmp -s "$builddir"/customer.csv "$ciscodiscdir"/customer.csv
#  if [[ $? == 0 ]] ; then
#    echo "Check of customer.csv file integrity passed. files are identical."
#  else
#    echo "Check of customer.csv file integrity failed. Files are not identical."
#  fi ;  

#  ## check that the number of interfaces in the ce files and the interface.csv match
#  if [[ "$(grep -h INTERFACE "$builddir"/ce_*.csv | wc -l)" -eq "$(grep -h INTERFACE "$ciscodiscdir"/interface.csv | wc -l)" ]] ; then
#    echo "number of interfaces match interface.csv. file integrity passed"
#  else
#    echo "number of interfaces in interface.csv do not match. file integity failed "
#  fi ;
echo

}
  
do_ciscodiscovery_precheck ()
{

#check for VERSION.txt, and user input to continue
  if [[ -e VERSION.txt ]] ; then
    echo "VERSION.txt exists. continuing"
    echo "version is $(cat VERSION.txt). Do you wish to continue?"
	
	while true ; do 
	 read yesno
     if [[ "$yesno" == "yes" || "$yesno" == "YES" ]] ; then
       echo "continuing..."
       break
    elif [[ "$yesno" == "no" || "$yesno" == "NO" ]] ; then
       echo "exiting"
       exit 0
    else
     echo "invalid entry. enter yes or no"
    fi;
  done
  
  else
    echo " check for VERSION.txt failed! "
	#exit 1
	echo "since the current version doesnt have a VERSION.txt, im skipping the exit that would normally happen."
  fi ;
  
#check for CiscoDiscovery.config

  if [[ -e ./conf/DiscoveryConfig.conf ]] ; then 
    echo "CiscoDiscovery.config exists."
  else
    echo "Failure finding CiscoDiscovery.config. you need to create it."
    exit 1
  fi ;
  
}



do_cleanupbeforecdisc () 
{ 
  rm "$ciscodiscdir"/xml/Topology*.xml
#  if [[ $? == 0 ]] ; then
#    echo "removed old Topology files from CiscoDiscovery."
#  else
#    echo "failed to remove old Topology files from CiscoDiscovery"
#    exit 1
#  fi ; 
  rm "$ciscodiscdir"/logs/*
#  if [[ $? == 0 ]] ; then
#    echo "removing old log files from CiscoDiscovery"
#  else
#    echo "failed to remove old log files from CiscoDiscovery"
#    exit 1
#  fi ;
}

  
  
do_ciscodiscovery () {
##do cisco discovery.
  cd "$ciscodiscdir"
  if [[ $? == 0 ]] ; then 
    echo "changing directory to CiscoDiscovery"
  else
    echo "failure to change to CiscoDirectory"
    exit 1
  fi ;
  ##add some prechecks and move some files before doing ciscodiscovery.
  do_ciscodiscovery_precheck;
  
  
  
echo " ( time /bin/sh ./disc.sh "$builddir"/DiscoveryInfo_"$customer".csv "$externalip" "$ciscodiscdir"/conf/DiscoveryConfig.conf  "$builddir"/customer.csv "$builddir"/activationFiles/interface.csv ) 2>&1 | tee "$builddir"/activationLogs/cisco_discovery-out"
  
 ( time /bin/sh ./disc.sh "$builddir"/DiscoveryInfo_"$customer".csv "$externalip" "$ciscodiscdir"/conf/DiscoveryConfig.conf  "$builddir"/customer.csv "$builddir"/activationFiles/interface.csv ) 2>&1 | tee "$builddir"/activationLogs/cisco_discovery-out

  if [[ $? == 0 ]] ; then 
    echo "CiscoDiscovery exited successfully"
  else
    echo "CiscoDiscovery exited with a failure code"
    exit 1
  fi ;
  
} 



do_checkforoutputfile () {
## get this from the customer.csv. second to last field indicated of interface filtering is on
## need to update with above information.

  if [[ -e Topology_intf_out.xml ]] ; then
    echo "ciscodiscovery output file is Topology_intf_out.xml"
  elif [[ -e Topology_out.xml ]] ; then
    echo "ciscodiscovery output file isw Topology_out.xml"
	$topologyoutfile="topology_out.xml"
  else
    echo "could not find the ciscodiscovery output file."
	exit 1
  fi ; 
}  



do_movefilesfromcdisc () {
##do move files from cisco discovery to activation subset folder

  cp "$ciscodiscdir"/xml/Topology*.xml "$builddir"/activationFiles/

  if [[ $? == 0 ]] ; then 
    echo "move Topology.xml from CiscoDirectory, to activationFiles successful"
  else
    echo "move of Topology.xml from CiscoDiscovery, to activationFiles failed"
    exit 1
  fi ;

#copy the topo_out from cdisc to activationFiles

#  cp "$ciscodiscdir"/"$topologyoutputfile" "$builddir"/activationFiles/
#  if [[ $? == 0 ]] ; then 
#    echo "move of Topology output file from CiscoDiscovery, to activationFiles successful"
#  else
#    echo "move of Topology output file from CiscoDiscovery, to activationFiles failed"
#    exit 1
#  fi ;
#copy a backup copy of DiscoveryConfig.conf to activationFiles  
  cp "$ciscodiscdir"/conf/DiscoveryConfig.conf  "$builddir"/activationFiles/

  if [[ $? == 0 ]] ; then 
    echo "copy of DiscoveryConfig.conf from CiscoDiscovery, to activationFiles successful"
  else
    echo "copy of DiscoveryConfig.conf from CiscoDiscovery, to activationFiles failed"
    exit 1
  fi ;
  
#copy all csv files to activationfiles for backups  
  cp "$ciscodiscdir"/csv/*.csv "$builddir"/activationFiles/

  if [[ $? == 0 ]] ; then 
    echo "move of *.csv files to activationFiles completed successfully"
  else
    echo "move of *.csv file to activationFiles failed"
    exit 1
  fi ;
  
}








do_archivevdiscservlogs () {
#do archive vista discovery server logs

  vistadisclog="${autodiscofile/autodisco_result/discovery}"
  vistadisclog="${vistadisclog/%.xml/.txt}"
  vistadisclog="${vistadisclog/result/log}"

  

#archive discovery log file  
  cp "$vistadisclog" "$builddir"/activationLogs
  if [[ $? == 0 ]] ; then 
    echo "move of vista discovery log to activationLogs completed successfully"
  else
    echo "move of vista discovery log to activationLogs failed"
    exit 1
  fi ;
  
#archive all CiscoDiscovery logs
  mv "$ciscodiscdir"/logs/*.log "$builddir"/activationLogs
  if [[ $? == 0 ]] ; then 
    echo "move of CiscoDiscovery logs to activationLogs completed successfully"
  else
    echo "move of CiscoDiscovery logs to activationLogs failed, there may be no logs to move if you skipped CiscoDiscovery"
  fi ;
  


}




do_vdiscvalidation () { 
  echo ; echo ; echo ;

  ##total interfaces in DiscoveryInfo
  echo "total devices in DiscoveryInfo file"
  cat "$builddir"/DiscoveryInfo_"$customer".csv | wc -l
  ## total interfaces that entered connect test
  
  #echo "total devices that entered connect test"
  #grep -v -E 'Source IP Address'  "$builddir"/activationLogs/connect_qos-out -c
  ## number of interfaces that passed connect test
  #echo "total number of devices that passed connect test"
  #grep -v -E 'Error|Source IP Address' "$builddir"/activationLogs/connect_qos-out -c
  ## number of devices in autodisco_result file
  echo "total number of devices in autodisco_result file"
  grep VistaName=\"Router\" "$autodiscofile" -c
  
}
  
  
  
do_cdiscvalidation () {
 
  echo "total devices in Topology.xml "
  grep "Instance Name=\"RT " "$builddir"/activationFiles/Topology.xml -c
  echo "total interfaces in Topology.xml"
  grep "Instance Name=\"IF " "$builddir"/activationFiles/Topology.xml -c 
  echo "total interface in ce file"
  grep INTERFACE "$builddir"/ce_*.csv -c
  echo "total devices in Topology_out.xml "
  grep "Instance Name=\"RT " "$builddir"/activationFiles/Topology_out.xml -c
  echo "total interfaces in Topology_out.xml file "
  grep "Instance Name=\"IF " "$builddir"/activationFiles/Topology_out.xml -c
}



